// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartCondoApi.Models;

#nullable disable

namespace SmartCondoApi.Migrations
{
    [DbContext(typeof(SmartCondoContext))]
    [Migration("20250307174520_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartCondoApi.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CarId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Condominium", b =>
                {
                    b.Property<int>("CondominiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CondominiumId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TowerCount")
                        .HasColumnType("integer");

                    b.HasKey("CondominiumId");

                    b.ToTable("Condominiums");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LoginId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("Expiration")
                        .HasColumnType("date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<int>("CondominiumId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TowerId")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TowerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("CondominiumId")
                        .HasColumnType("integer");

                    b.Property<int?>("FloorId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TowerId")
                        .HasColumnType("integer");

                    b.HasKey("ServiceId");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TowerId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartCondoApi.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Tower", b =>
                {
                    b.Property<int>("TowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TowerId"));

                    b.Property<int>("CondominiumId")
                        .HasColumnType("integer");

                    b.Property<int>("FloorCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TowerId");

                    b.HasIndex("CondominiumId");

                    b.ToTable("Towers");
                });

            modelBuilder.Entity("SmartCondoApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Apartment")
                        .HasColumnType("integer");

                    b.Property<int?>("CondominiumId")
                        .HasColumnType("integer");

                    b.Property<int?>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("LoginId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalTaxID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TowerId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.HasIndex("PersonalTaxID")
                        .IsUnique();

                    b.HasIndex("TowerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Car", b =>
                {
                    b.HasOne("SmartCondoApi.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Message", b =>
                {
                    b.HasOne("SmartCondoApi.Models.Condominium", "Condominium")
                        .WithMany("Messages")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCondoApi.Models.User", "RecipientUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartCondoApi.Models.User", "SenderUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartCondoApi.Models.Tower", "Tower")
                        .WithMany("Messages")
                        .HasForeignKey("TowerId");

                    b.Navigation("Condominium");

                    b.Navigation("RecipientUser");

                    b.Navigation("SenderUser");

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Service", b =>
                {
                    b.HasOne("SmartCondoApi.Models.Condominium", "Condominium")
                        .WithMany("Services")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCondoApi.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCondoApi.Models.Tower", "Tower")
                        .WithMany("Services")
                        .HasForeignKey("TowerId");

                    b.Navigation("Condominium");

                    b.Navigation("ServiceType");

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Tower", b =>
                {
                    b.HasOne("SmartCondoApi.Models.Condominium", "Condominium")
                        .WithMany("Towers")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominium");
                });

            modelBuilder.Entity("SmartCondoApi.Models.User", b =>
                {
                    b.HasOne("SmartCondoApi.Models.Condominium", "Condominium")
                        .WithMany("Users")
                        .HasForeignKey("CondominiumId");

                    b.HasOne("SmartCondoApi.Models.Login", "Login")
                        .WithOne("User")
                        .HasForeignKey("SmartCondoApi.Models.User", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCondoApi.Models.Tower", "Tower")
                        .WithMany("Users")
                        .HasForeignKey("TowerId");

                    b.Navigation("Condominium");

                    b.Navigation("Login");

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Condominium", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Services");

                    b.Navigation("Towers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Login", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartCondoApi.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartCondoApi.Models.Tower", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartCondoApi.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
